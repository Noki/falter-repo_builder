#!/bin/bash

OPENWRT_VERSION="$1"
FEED="$2"
OUTPUT_DIR="$3"
BUILD_PARALLEL="$4"

MAX_JOBS=6
CUR_JOBS=0
export COUNT_FILE="/tmp/count.tmp"

# check for dependencies
DEPS="docker-hub docker"

for package in $DEPS; do
	which $package > /dev/null
	if [ $? != 0 ]; then
		echo "Dependencies: $DEPS"
		echo "Package $package is not installed."
		echo "Exiting..."
		exit 1
	fi
done

declare -A archs
archs["aarch64_cortex-a53"]=mediatek-mt7622
archs+=( ["aarch64_cortex-a72"]=mvebu-cortexa72 )
archs+=( ["aarch64_generic"]=layerscape-armv8_64b )
archs+=( ["arm_arm1176jzf-s_vfp"]=brcm2708-bcm2708 )
archs+=( ["arm_arm926ej-s"]=mxs-generic )
archs+=( ["arm_cortex-a15_neon-vfpv4"]=ipq806x-generic )
archs+=( ["arm_cortex-a5_neon-vfpv4"]=at91-sama5 )
archs+=( ["arm_cortex-a7"]=sunxi-cortexa7 )
archs+=( ["arm_cortex-a7_neon-vfpv4"]=ipq40xx-generic )
archs+=( ["arm_cortex-a8_vfpv3"]=sunxi-cortexa8 )
archs+=( ["arm_cortex-a9"]=bcm53xx-generic )
archs+=( ["arm_cortex-a9_neon"]=zynq-generic )
archs+=( ["arm_cortex-a9_vfpv3"]=mvebu-cortexa9 )
archs+=( ["arm_fa526"]=gemini-generic )
archs+=( ["arm_mpcore"]=oxnas-ox820 )
archs+=( ["arm_mpcore_vfp"]=cns3xxx-generic )
archs+=( ["arm_xscale"]=kirkwood-generic )
archs+=( ["i386_geode"]=x86-geode )
archs+=( ["i386_pentium4"]=x86-generic )
archs+=( ["mips64_octeon"]=octeon-generic )
archs+=( ["mips_24kc"]=ath79-generic )
archs+=( ["mips_mips32"]=brcm63xx-generic )
archs+=( ["mipsel_24kc"]=ramips-mt7620 )
archs+=( ["mipsel_24kc_24kf"]=pistachio-generic )
archs+=( ["mipsel_74kc"]=brcm47xx-mips74k )
archs+=( ["mipsel_mips32"]=brcm47xx-legacy )
archs+=( ["mipsel_mips32r2"]=ramips-rt288x )
archs+=( ["powerpc_464fp"]=apm821xx-nand )
archs+=( ["powerpc_8540"]=mpc85xx-generic )
archs+=( ["x86_64"]=x86-64 )

for key in ${!archs[@]}; do
	SDK="${archs[${key}]}"
	[ "$OPENWRT_VERSION" != "snapshot" ] && SDK+="-$OPENWRT_VERSION"
	if [ -n "$BUILD_PARALLEL" ]; then
		CUR_JOBS=$(( $CUR_JOBS + 1 ))
		echo $CUR_JOBS > $COUNT_FILE
		(./build_feed "$SDK" "$FEED" "$OUTPUT_DIR" PARALLEL) &
	else
		./build_feed "$SDK" "$FEED" "$OUTPUT_DIR"
	fi
	while [ $CUR_JOBS -ge $MAX_JOBS ]; do
		sleep 20
		CUR_JOBS=$(cat $COUNT_FILE)
	done
done
